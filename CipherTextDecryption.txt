import re

# Function to generate key table (5x5 matrix)
def generate_key_table(key):
    key = ''.join(sorted(set(key), key=lambda x: key.index(x)))
    key = key.replace('j', 'i')  # Replace 'j' with 'i'
    alphabet = "abcdefghiklmnopqrstuvwxyz"
    key_table = []
    
    # Create the key table with the given key
    for char in key:
        if char not in key_table:
            key_table.append(char)
    
    # Fill the remaining letters in the alphabet
    for char in alphabet:
        if char not in key_table:
            key_table.append(char)
    
    return [key_table[i:i + 5] for i in range(0, 25, 5)]

# Preprocess text for Playfair cipher (remove non-alphabet characters, replace 'j' with 'i')
def preprocess_text(text):
    text = re.sub(r'[^a-zA-Z]', '', text).lower()
    text = text.replace('j', 'i')
    
    processed_text = ""
    i = 0
    # Create letter pairs
    while i < len(text):
        processed_text += text[i]
        if i + 1 < len(text) and text[i] == text[i + 1]:
            processed_text += 'x'  # Add 'x' between repeating letters
        elif i + 1 < len(text):
            processed_text += text[i + 1]
            i += 1
        i += 1
    if len(processed_text) % 2 != 0:
        processed_text += 'x'  # Add 'x' if text length is odd
    
    return processed_text

# Find the position of a character in the key table
def find_position(char, key_table):
    for row in range(5):
        for col in range(5):
            if key_table[row][col] == char:
                return row, col
    return None

# Decrypt a pair of letters according to Playfair cipher rules
def decrypt_pair(pair, key_table):
    row1, col1 = find_position(pair[0], key_table)
    row2, col2 = find_position(pair[1], key_table)
    
    if row1 == row2:  # Same row
        return key_table[row1][(col1 - 1) % 5] + key_table[row2][(col2 - 1) % 5]
    elif col1 == col2:  # Same column
        return key_table[(row1 - 1) % 5][col1] + key_table[(row2 - 1) % 5][col2]
    else:  # Rectangle
        return key_table[row1][col2] + key_table[row2][col1]

# Decrypt ciphertext using Playfair cipher
def playfair_decrypt(ciphertext, key):
    key_table = generate_key_table(key)
    
    plaintext = ""
    for i in range(0, len(ciphertext), 2):
        plaintext += decrypt_pair(ciphertext[i:i+2], key_table)
    
    return plaintext

# Define the key and ciphertext
key = "explanation"
ciphertext = "otgisqxbobbknkykoiwozbkvmbibaxlste"

# Preprocess the text (remove spaces, punctuation, etc.)
ciphertext_processed = preprocess_text(ciphertext)

# Decrypt the ciphertext
decrypted_text = playfair_decrypt(ciphertext_processed, key)

print(f"Ciphertext: {ciphertext_processed}")
print(f"Decrypted Text: {decrypted_text}")

